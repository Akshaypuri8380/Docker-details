#Docker 

#Docker compose

#Define the Version

version: '3'

#Define Services:
#Each service corresponds to a container. Define all the services your application needs.

services:
  web:
    image: nginx:latest
    ports:
      - "80:80"
  app:
    build: .
    ports:
      - "3000:3000"
    depends_on:
      - db
  db:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: example


#Configure Each Service:

image: Specify the Docker image to use.
build: Specify the build context if you are building from a Dockerfile.
ports: Map host ports to container ports.
volumes: Mount host directories or named volumes into the container.
environment: Set environment variables.
depends_on: Specify dependencies between services.
networks: Specify networks to connect the service to.

Define Volumes:

Use volumes to persist data generated by and used by Docker containers.

volumes:
  db-data:

Define Networks:

Use networks to manage communication between containers.

networks:
  frontend:
  backend:

Full Example
Hereâ€™s a complete example of a docker-compose.yml file for a simple web application with an Nginx web server, a Node.js application, and a PostgreSQL database:


version: '3'

services:
  web:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - frontend

  app:
    build: ./app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    volumes:
      - ./app:/app
    depends_on:
      - db
    networks:
      - frontend
      - backend

  db:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: example
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend

volumes:
  db-data:

networks:
  frontend:
  backend:

Explanation
version: Specifies the version of the Docker Compose file format.
services:
web: Uses the official Nginx image, maps port 80 on the host to port 80 on the container, mounts a local configuration file, and connects to the frontend network.
app: Builds the Node.js application from the ./app directory, maps port 3000, sets an environment variable, mounts the local ./app directory, depends on the db service, and connects to both frontend and backend networks.
db: Uses the official PostgreSQL image, sets the POSTGRES_PASSWORD environment variable, mounts a named volume db-data, and connects to the backend network.
volumes: Defines a named volume db-data for persisting database data.
networks: Defines two networks, frontend and backend, for isolating the communication between services.

How to Use the Docker Compose File

Start the application:

docker-compose up

Start the application in detached mode:

docker-compose up -d

Stop the application:

docker-compose down

Build or rebuild services:

docker-compose build

View the logs of all services:

docker-compose logs

Scale the number of container instances for a service:

docker-compose up --scale app=3






